#importing the required python packages
import numpy as np
import matplotlib.pyplot as plt
from astropy.io import fits
from scipy.optimize import curve_fit
from sklearn.metrics import r2_score
from scipy.interpolate import interp1d
import csv
from scipy.stats import norm
import os
import glob


# defining the values required in the code 
source_name = 'ton 599'
redshift = 0.724745
threshold_difference = 0.2

folder_path = "/home/romeo/Desktop/High_energy/lab/ton599"

pattern = os.path.join(folder_path, '**', 'ton599.fc*.fits')
filtered_files = glob.glob(pattern, recursive=True)

v_mag = {
    'cycle 3': [17.46, 17.43, 17.39, 17.22, 17.39, 17.1],
    'cycle 4': [16.44, 16.84, 17.05, 17.15, 16.41, 16.76, 16.08, 15.49, 15.79, 16.18, 15.71, 14.97, 14.79, 15.47, 15.43, 15.42, 16.14, 16.35, 16.36, 16.78, 17.06, 16.21, 16.2, 15.93, 15.38],
    'cycle 7': [17.17, 16.28, 16.59, 16.98, 17.37, 17.22, 15.99, 16.81, 16.84, 16.88, 16.99, 16.78, 16.74, 16.49, 16.62, 16.58, 16.92, 16.88, 16.94, 16.71, 16.72, 16.61, 16.75, 16.57, 16.53],
    'cycle 8': [16.63, 16.82, 16.29, 16.06, 16.62, 16.28, 15.99, 16.81, 16.84, 16.88, 16.99, 16.78, 16.74, 16.49, 16.62, 16.58, 16.92, 16.88, 16.94, 16.71, 16.72, 16.61, 16.75, 16.57, 16.53, 17.08, 17.17, 16.96, 17.01, 17.13, 16.83, 16.71, 17.19, 16.98, 16.71, 16.76, 15.64],
    'cycle 9': [15.29, 15.27, 15.99, 14.88, 15.87, 17.03, 14.08, 16.6, 16.8, 17.01, 17.21, 17.45, 17.73, 17.28, 17.59, 17.7, 17.67, 17.6, 17.38, 17.48, 16.54, 16.66, 16.74, 16.78, 16.89, 16.84, 17.09, 17.36, 17.48, 17.4, 17.57, 17.06, 17.29, 17.25, 17.37, 17.36, 17.33, 16.78, 16.67, 16.67],
    'cycle 10': [15.5, 15.84, 15.61, 15.21, 14.24, 14.32]
}



tot_flux=[]
mv=[]
for file in filtered_files:
    file_path = os.path.join(folder_path, file)
    hdul = fits.open(file_path)
    data = hdul[0].data 
    pixel_to_angstrom = 4
    min_wavelength = 4000 
    max_wavelength = 7554
    num_pixels = len(data)
    wavelength_array = np.arange(min_wavelength, max_wavelength, pixel_to_angstrom)[:num_pixels]


    min_wavelength_range = 5400 
    max_wavelength_range = 5600 
    delta_lambda = (max_wavelength_range-min_wavelength_range)
    indices = np.where((wavelength_array >= min_wavelength_range) & (wavelength_array <= max_wavelength_range))
    flux_within_range = data[indices] 
    mean_flux_within_range = np.sum((flux_within_range) /(10**-26))/delta_lambda*10**-10

    tot_flux.append(mean_flux_within_range )
    v= 15 - 2.5*np.log(mean_flux_within_range/(3.64))
    mv.append(v)



# Count the total number of elements in the dictionary
total_elements = sum(len(values) for values in v_mag.values())

# Create a single list of all elements
all_elements = [value for values in v_mag.values() for value in values]

print(np.mean(all_elements))
print(np.mean(mv))
